name: Update PR Description

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  update-pr-description:
    runs-on: ubuntu-latest
    if: startsWith(github.head_ref, 'release/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Update PR description
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.TOKEN }}
        script: |
          // Function to format commit message
          function formatCommitMessage(commitMessage) {
            const teamTicketRegex = /^\[([A-Z]+-\d+)\]/;
            const prNumberRegex = /#(\d+)$/;

            const teamTicketMatch = commitMessage.match(teamTicketRegex);
            const prNumberMatch = commitMessage.match(prNumberRegex);

            const teamTicket = teamTicketMatch ? teamTicketMatch[1] : 'Unknown';
            const prNumber = prNumberMatch ? prNumberMatch[1] : 'Unknown';

            return `[[${teamTicket}](https://vshred.atlassian.net/browse/${teamTicket})]: ${commitMessage} ([#${prNumber}](https://github.com/VinsanityShred/laravel-ecommerce/pull/${prNumber}))`;
          }

          // Get list of commits in the PR
          const pull_number = context.payload.pull_request.number;
          const owner = context.repo.owner;
          const repo = context.repo.repo;

          const listCommitsResponse = await github.rest.pulls.listCommits({
            owner,
            repo,
            pull_number,
          });

          const formattedCommits = listCommitsResponse.data.map(commit => formatCommitMessage(commit.commit.message));

          // Construct new PR description
          let newDescription = '### Commits in this PR:\n';
          newDescription += formattedCommits.join('\n');

          // Update the PR description
          await github.rest.pulls.update({
            owner,
            repo,
            pull_number,
            body: newDescription,
          });
