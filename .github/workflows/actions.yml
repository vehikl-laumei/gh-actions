name: Update PR Description

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  update-pr-description:
    runs-on: ubuntu-latest
    if: startsWith(github.head_ref, 'release/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Update PR description
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.TOKEN }}
        script: |
          // Function to format commit message
          function formatCommitMessage(commitMessage) {
            const jiraIssueRegex = /^\[([A-Z]+-\d+)\]\s+/;
            const prNumberRegex = /\(#(\d+)\)$/;

            // Check if the commit message ends with a PR number
            if (!prNumberRegex.test(commitMessage)) {
              return null;
            }

            // Extract the PR number
            const prNumberMatch = commitMessage.match(prNumberRegex);
            const prNumber = prNumberMatch[1];

            // Remove the JIRA issue key and PR number from the commit message
            let cleanCommitMessage = commitMessage.replace(jiraIssueRegex, '').replace(prNumberRegex, '');

            // Construct the formatted commit message
            const formattedMessage = `[${cleanCommitMessage.trim()}](https://github.com/VinsanityShred/laravel-ecommerce/pull/${prNumber})`;

            return formattedMessage;
          }

          // Get list of commits in the PR
          const pull_number = context.payload.pull_request.number;
          const owner = context.repo.owner;
          const repo = context.repo.repo;

          const listCommitsResponse = await github.rest.pulls.listCommits({
            owner,
            repo,
            pull_number,
          });

          // Filter and format commits
          const formattedCommits = listCommitsResponse.data
            .map(commit => formatCommitMessage(commit.commit.message))
            .filter(Boolean); // Filter out null values

          // Construct new PR description only if there are formatted commits
          let newDescription = formattedCommits.length > 0 ? '### Commits in this PR:\n' + formattedCommits.join('\n') : '';

          // Update the PR description if necessary
          if (newDescription) {
            await github.rest.pulls.update({
              owner,
              repo,
              pull_number,
              body: newDescription,
            });
          }
